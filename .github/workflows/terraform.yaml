name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  push:
    branches:
    - main
    paths:
    - terraform/**
  pull_request:
    branches:
    - main
    paths:
    - terraform/**

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to Azure
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID}}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID}}
  KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}

jobs:

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-24.04
    environment: production
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v4

    - name: Debug env variable
      run: echo "Debug env variable is ${{ secrets.DEBUG_ENV_VARIABLE }}"

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.3

    # Terraform Linting
    # https://github.com/terraform-linters/setup-tflint

    - uses: terraform-linters/setup-tflint@v5
      name: Setup TFLint
      with:
        tflint_version: v0.52.0

    - name: Show TFLint version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact --recursive
      continue-on-error: true

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Write backend config
      run: |
        cat > backend-config.hcl <<EOF
        resource_group_name  = "${{ secrets.AZURE_BACKEND_RG }}"
        storage_account_name = "${{ secrets.AZURE_BACKEND_STORAGE }}"
        container_name       = "${{ secrets.AZURE_BACKEND_CONTAINER }}"
        key                  = "${{ secrets.AZURE_BACKEND_KEY }}"
        EOF

    - name: Fetch secrets from Key Vault
      run: |
        echo "resource_group_name = \"$(az keyvault secret show \
          --vault-name $KEY_VAULT_NAME \
          --name resource-group-name \
          --query value -o tsv)\"" >> terraform.tfvars

    - name: Write secrets into terraform.tfvars
      run: |
        echo "key_vault_name = \"${{ secrets.KEY_VAULT_NAME }}\"" >> terraform.tfvars
        echo "key_vault_resource_group_name = \"${{ secrets.KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
        echo "certificate_key_vault_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_NAME }}\"" >> terraform.tfvars
        echo "certificate_key_vault_resource_group_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
        echo "identity_resource_group_name = \"${{ secrets.IDENTITY_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars

    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend-config.hcl

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Checkov - Code Security Scanning
    # https://www.checkov.io/4.Integrations/GitHub%20Actions.html

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
   
    - name: Test with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform
        framework: terraform

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -no-color \
          -input=false \
          -var-file=env/prod.tfvars \
          -var-file=terraform.tfvars

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform

          ${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

# Use this with peer review -> approval -> Then only push in production

  # terraform-apply:
  #   name: "Terraform Apply"
  #   runs-on: ubuntu-24.04
  #   needs: terraform-plan
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment:
  #     name: production
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./terraform

  #   steps:
  #   - name: Checkout the repository to the runner
  #     uses: actions/checkout@v4

  #   - name: Setup Terraform with specified version on the runner
  #     uses: hashicorp/setup-terraform@v3
  #     with:
  #       terraform_version: 1.13.2

  #   - name: Azure Login
  #     uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #       enable-AzPSSession: true

  #   - name: Terraform fmt
  #     id: fmt
  #     run: terraform fmt -check
  #     continue-on-error: true

  #   - name: Write backend config
  #     run: |
  #       cat > backend-config.hcl <<EOF
  #       resource_group_name  = "${{ secrets.AZURE_BACKEND_RG }}"
  #       storage_account_name = "${{ secrets.AZURE_BACKEND_STORAGE }}"
  #       container_name       = "${{ secrets.AZURE_BACKEND_CONTAINER }}"
  #       key                  = "${{ secrets.AZURE_BACKEND_KEY }}"
  #       EOF

  #   - name: Fetch secrets from Key Vault
  #     run: |
  #       echo "resource_group_name = \"$(az keyvault secret show \
  #         --vault-name $KEY_VAULT_NAME \
  #         --name resource-group-name \
  #         --query value -o tsv)\"" >> terraform.tfvars

  #   - name: Write secrets into terraform.tfvars
  #     run: |
  #       echo "key_vault_name = \"${{ secrets.KEY_VAULT_NAME }}\"" >> terraform.tfvars
  #       echo "key_vault_resource_group_name = \"${{ secrets.KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
  #       echo "certificate_key_vault_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_NAME }}\"" >> terraform.tfvars
  #       echo "certificate_key_vault_resource_group_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
  #       echo "identity_resource_group_name = \"${{ secrets.IDENTITY_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars

  #   - name: Terraform Init
  #     id: init
  #     run: terraform init -backend-config=backend-config.hcl

  #   - name: Terraform Validate
  #     id: validate
  #     run: terraform validate -no-color

  #   - name: Terraform Plan
  #     id: plan
  #     run: |
  #       terraform plan \
  #         -no-color \
  #         -input=false \
  #         -var-file=env/prod.tfvars \
  #         -var-file=terraform.tfvars

  #   - name: Terraform Apply
  #     run: terraform apply -auto-approve -var-file=env/prod.tfvars -var-file=terraform.tfvars

