name: "Terraform Apply"

on:
  workflow_dispatch:
    # manual trigger
    inputs:
      environment:
        description: "Environment to deploy (dev/stage/production)"
        required: true
        default: "production"

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to Azure
  # ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  # ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  # ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID}}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID}}
  KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
  # Terraform version
  TERRAFORM_VERSION: 1.13.3

jobs:

  lint-and-security-scan:
    name: "Lint and Security Scan"
    runs-on: ubuntu-24.04
    environment: production
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:

    - name: Checkout the repository to the runner
      uses: actions/checkout@v4

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - uses: terraform-linters/setup-tflint@v5
      name: Setup TFLint
      with:
        tflint_version: v0.52.0

    - name: Init TFLint
      run: tflint --init

    # Terraform Linting
    # https://github.com/terraform-linters/setup-tflin

    - name: Run TFLint
      run: tflint -f compact --recursive
      continue-on-error: true

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    # Checkov - Code Security Scanning
    # https://www.checkov.io/4.Integrations/GitHub%20Actions.html

    # - name: Set up Python 3.8
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: 3.8

    # - name: Test with Checkov
    #   id: checkov
    #   uses: bridgecrewio/checkov-action@master
    #   with:
    #     directory: terraform
    #     framework: terraform

    # - name: Upload Checkov results to Artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: checkov-results
    #     path: results.sarif

    # - name: Upload Checkov results to GitHub Security Tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: results.sarif


    # tfsec for Terraform Security Scanning
    # https://github.com/aquasecurity/tfsec-action

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working-directory: terraform
        soft_fail: true # Never do this in production

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-24.04
    environment: production
    needs: lint-and-security-scan
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:

    - name: Checkout the repository to the runner
      uses: actions/checkout@v4

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Azure setup

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Write backend config
      run: |
        cat > backend-config.hcl <<EOF
        resource_group_name  = "${{ secrets.AZURE_BACKEND_RG }}"
        storage_account_name = "${{ secrets.AZURE_BACKEND_STORAGE }}"
        container_name       = "${{ secrets.AZURE_BACKEND_CONTAINER }}"
        key                  = "${{ secrets.AZURE_BACKEND_KEY }}"
        EOF

    - name: Fetch secrets from Key Vault
      run: |
        echo "resource_group_name = \"$(az keyvault secret show \
          --vault-name $KEY_VAULT_NAME \
          --name resource-group-name \
          --query value -o tsv)\"" >> terraform.tfvars

    - name: Write secrets into terraform.tfvars
      run: |
        echo "key_vault_name = \"${{ secrets.KEY_VAULT_NAME }}\"" >> terraform.tfvars
        echo "key_vault_resource_group_name = \"${{ secrets.KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
        echo "certificate_key_vault_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_NAME }}\"" >> terraform.tfvars
        echo "certificate_key_vault_resource_group_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
        echo "identity_resource_group_name = \"${{ secrets.IDENTITY_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars

    # Terraform commands

    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend-config.hcl

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -detailed-exitcode \
          -no-color \
          -input=false \
          -var-file=env/prod.tfvars \
          -var-file=terraform.tfvars \
          -out=tfplan
        echo "exit_code=$?" >> "$GITHUB_OUTPUT"

    - name: Upload Terraform Plan artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: terraform/tfplan

    # Output on PR

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform

          ${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Check if changes exist
      run: |
        if [ "${{ steps.plan.outputs.exit_code }}" -eq 0 ]; then
          echo "‚úÖ No changes in infrastructure."
        elif [ "${{ steps.plan.outputs.exit_code }}" -eq 2 ]; then
          echo "‚ö†Ô∏è Infrastructure changes detected."
        else
          echo "‚ùå Terraform plan failed."
          exit 1
        fi

  # Use this with peer review -> approval -> Then only push in production

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-24.04
    environment: production
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.terraform-plan.outputs.exitcode == '2'
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:

    - name: Checkout the repository to the runner
      uses: actions/checkout@v4

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Azure setup

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Write backend config
      run: |
        cat > backend-config.hcl <<EOF
        resource_group_name  = "${{ secrets.AZURE_BACKEND_RG }}"
        storage_account_name = "${{ secrets.AZURE_BACKEND_STORAGE }}"
        container_name       = "${{ secrets.AZURE_BACKEND_CONTAINER }}"
        key                  = "${{ secrets.AZURE_BACKEND_KEY }}"
        EOF

    - name: Fetch secrets from Key Vault
      run: |
        echo "resource_group_name = \"$(az keyvault secret show \
          --vault-name $KEY_VAULT_NAME \
          --name resource-group-name \
          --query value -o tsv)\"" >> terraform.tfvars

    - name: Write secrets into terraform.tfvars
      run: |
        echo "key_vault_name = \"${{ secrets.KEY_VAULT_NAME }}\"" >> terraform.tfvars
        echo "key_vault_resource_group_name = \"${{ secrets.KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
        echo "certificate_key_vault_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_NAME }}\"" >> terraform.tfvars
        echo "certificate_key_vault_resource_group_name = \"${{ secrets.CERTIFICATE_KEY_VAULT_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars
        echo "identity_resource_group_name = \"${{ secrets.IDENTITY_RESOURCE_GROUP_NAME }}\"" >> terraform.tfvars

    # Terraform commands

    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend-config.hcl

    - name: Download Terraform Plan artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file=env/prod.tfvars -var-file=terraform.tfvars tfplan

